// Code generated by mockery v2.8.0. DO NOT EDIT.

package processor

import (
	v1 "github.com/google/go-containerregistry/pkg/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockRegistryClient is an autogenerated mock type for the RegistryClient type
type MockRegistryClient struct {
	mock.Mock
}

// listTags provides a mock function with given fields: repository, creds
func (_m *MockRegistryClient) listTags(repository string, creds RegistryCredentials) ([]string, error) {
	ret := _m.Called(repository, creds)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, RegistryCredentials) []string); ok {
		r0 = rf(repository, creds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, RegistryCredentials) error); ok {
		r1 = rf(repository, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// pull provides a mock function with given fields: source, creds
func (_m *MockRegistryClient) pull(source string, creds RegistryCredentials) (v1.Image, error) {
	ret := _m.Called(source, creds)

	var r0 v1.Image
	if rf, ok := ret.Get(0).(func(string, RegistryCredentials) v1.Image); ok {
		r0 = rf(source, creds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, RegistryCredentials) error); ok {
		r1 = rf(source, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// push provides a mock function with given fields: imageFullyQualifiedName, img, creds
func (_m *MockRegistryClient) push(imageFullyQualifiedName string, img v1.Image, creds RegistryCredentials) error {
	ret := _m.Called(imageFullyQualifiedName, img, creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, v1.Image, RegistryCredentials) error); ok {
		r0 = rf(imageFullyQualifiedName, img, creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
